!pip install tensorflow opencv-python matplotlib
import tensorflow as tf
import os
import numpy as np 
from matplotlib import pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout

gpus = tf.config.experimental.list_physical_devices('GPU')
for gpu in gpus:
    tf.config.experimental.set_memory_growth(gpu, True)
    
data = tf.keras.utils.image_dataset_from_directory('data')
data_iterator = data.as_numpy_iterator()
batch = data_iterator.next()

data = data.map(lambda x, y: (x/255, y))

train_size = int(len(data)*.7)
val_size = int(len(data)*.2)+1
test_size = int(len(data)*.1)+1

train = data.take(train_size)
val = data.skip(train_size).take(val_size)
test = data.skip(train_size+val_size).take(test_size)

model = Sequential()
# Block 1
model.add(Conv2D(16, (3,3), 1, activation='relu', input_shape=(256,256,3)))
model.add(MaxPooling2D((2, 2), strides=(2, 2)))

# Block 2
model.add(tf.keras.layers.BatchNormalization())
model.add(Conv2D(32, (3,3), 1, activation='relu'))
model.add(MaxPooling2D((2, 2), strides=(2, 2)))


# Block 3
model.add(tf.keras.layers.BatchNormalization())
model.add(Conv2D(16, (3,3), 1, activation='relu'))
model.add(MaxPooling2D((2, 2), strides=(2, 2)))


# Block 4
model.add(tf.keras.layers.BatchNormalization())
model.add(Conv2D(32, (3,3), 1, activation='relu'))
model.add(MaxPooling2D((2, 2), strides=(2, 2)))


# Block 5
model.add(tf.keras.layers.BatchNormalization())
model.add(Conv2D(16, (3,3), 1, activation='relu'))
model.add(MaxPooling2D((2, 2), strides=(2, 2)))


#Classification
model.add(Flatten())
model.add(Dense(256, activation='relu'))
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(units=128, activation='relu'))
model.add(tf.keras.layers.Dropout(0.2))
model.add(Dense(1, activation='sigmoid'))

#Compile
model.compile('rmsprop', loss=tf.losses.BinaryCrossentropy(), metrics=['accuracy'])

logdir='logs'
tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=logdir)
hist = model.fit(train, epochs=12, validation_data=val, callbacks=[tensorboard_callback])

#Loss Graph
fig = plt.figure()
plt.plot(hist.history['loss'], color='teal', label='loss')
plt.plot(hist.history['val_loss'], color='orange', label='val_loss')
fig.suptitle('Loss', fontsize=20)
plt.legend(loc="upper left")

#Accuracy Graph
fig = plt.figure()
plt.plot(hist.history['accuracy'], color='teal', label='accuracy')
plt.plot(hist.history['val_accuracy'], color='orange', label='val_accuracy')
fig.suptitle('Accuracy', fontsize=20)
plt.legend(loc="upper left")
plt.show()
plt.show()
